import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { FaArrowLeft, FaSpinner, FaEnvelope } from "react-icons/fa";
import backgroundImage from "../assets/background.jpg";
import Klogo from '../assets/KLOGO.png';
import { requestPasswordReset } from "../api";

const ForgotPassword = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const [messageType, setMessageType] = useState(""); // "success" or "error"
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [resetLinkSent, setResetLinkSent] = useState(false);

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsSubmitting(true);
    setMessage("");

    try {
      const response = await requestPasswordReset(email);

      setMessage(
        response.message ||
          "If an account exists with this email, a password reset link has been sent."
      );
      setMessageType("success");
      setResetLinkSent(true);

      // For development: show reset link if returned from API
      if (response.resetLink) {
        // In development mode, offer to redirect to reset password page
        setTimeout(() => {
          const shouldRedirect = window.confirm(
            "For development: Do you want to be redirected to the reset password page?"
          );
          if (shouldRedirect) {
            window.location.href = response.resetLink;
          }
        }, 1500);
      }
    } catch (error) {
      setMessage(
        error.error || "Something went wrong. Please try again later."
      );
      setMessageType("error");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div
      className="min-h-screen font-primary relative flex items-center justify-center p-4"
      style={{
        backgroundImage: `url(${backgroundImage})`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}
    >
      {/* Background Overlay */}
      <div className="absolute inset-0 bg-black/40 backdrop-blur-[1px]"></div>
      <div className="absolute inset-0 bg-gradient-to-br from-kgamify-500/20 via-transparent to-kgamify-pink-500/20"></div>
      
      {/* Content Container */}
      <div className="relative z-10 w-full max-w-md">
        {/* Logo Section */}
        <div className="text-center mb-8">
          <div className="relative">
            <div className="absolute -inset-4 bg-white/10 backdrop-blur-md rounded-full"></div>
            <img
              src={Klogo}
              alt="Kgamify Logo"
              className="relative w-20 h-20 mx-auto mb-4 object-contain drop-shadow-lg"
            />
          </div>
          <h1 className="text-3xl font-heading font-bold text-white mb-2 drop-shadow-lg">
            Reset Password
          </h1>
          <p className="text-white/90 text-base drop-shadow">
            Enter your email address and we&apos;ll send you instructions to reset your password.
          </p>
        </div>

        {/* Reset Form Card */}
        <div className="bg-white/95 backdrop-blur-md rounded-xl shadow-2xl border border-white/20 p-8">
          <button
            onClick={() => navigate("/")}
            className="mb-6 flex items-center text-gray-600 hover:text-kgamify-600 transition-colors"
          >
            <FaArrowLeft className="mr-2" />
            Back to Login
          </button>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block font-medium text-gray-800 mb-2">
                <FaEnvelope className="inline mr-2" />
                Email Address
              </label>
              <input
                type="email"
                value={email}
                onChange={handleEmailChange}
                className="input-kgamify bg-white/80 backdrop-blur-sm"
                required
                placeholder="Enter your registered email"
                disabled={resetLinkSent}
              />
            </div>

            {message && (
              <div
                className={`p-4 rounded-lg ${
                  messageType === "success"
                    ? "bg-green-50/90 text-green-700 border border-green-200"
                    : "bg-red-50/90 text-red-700 border border-red-200"
                } backdrop-blur-sm`}
              >
                {message}
              </div>
            )}

            <button
              type="submit"
              disabled={isSubmitting || resetLinkSent}
              className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl transition-all duration-200"
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <FaSpinner className="animate-spin mr-2" />
                  Sending...
                </div>
              ) : resetLinkSent ? (
                "Reset Link Sent"
              ) : (
                "Send Reset Link"
              )}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;
